// @generated by protoc-gen-es v1.1.1 with parameter "target=ts"
// @generated from file schemas/v1/every_scalars.proto (package schemas.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Api, Duration, Empty, FieldMask, Message, proto3, protoInt64, SourceContext, Struct, Timestamp, Type } from "@bufbuild/protobuf";

/**
 * すべてのスカラーを列挙する。
 * on JSON: https://protobuf.dev/programming-guides/proto3/#json
 *
 * @generated from message schemas.v1.EveryScalars
 */
export class EveryScalars extends Message<EveryScalars> {
  /**
   * Double
   *
   * @generated from field: double double_field = 1;
   */
  doubleField = 0;

  /**
   * Float
   *
   * @generated from field: float float_field = 2;
   */
  floatField = 0;

  /**
   * Int32
   *
   * @generated from field: int32 int32_field = 3;
   */
  int32Field = 0;

  /**
   * Int64
   *
   * @generated from field: int64 int64_field = 4;
   */
  int64Field = protoInt64.zero;

  /**
   * Uint32
   *
   * @generated from field: uint32 uint32_field = 5;
   */
  uint32Field = 0;

  /**
   * Uint64
   *
   * @generated from field: uint64 uint64_field = 6;
   */
  uint64Field = protoInt64.zero;

  /**
   * Sint32
   *
   * @generated from field: sint32 sint32_field = 7;
   */
  sint32Field = 0;

  /**
   * Sint64
   *
   * @generated from field: sint64 sint64_field = 8;
   */
  sint64Field = protoInt64.zero;

  /**
   * Fixed32
   *
   * @generated from field: fixed32 fixed32_field = 9;
   */
  fixed32Field = 0;

  /**
   * Fixed64
   *
   * @generated from field: fixed64 fixed64_field = 10;
   */
  fixed64Field = protoInt64.zero;

  /**
   * Sfixed32
   *
   * @generated from field: sfixed32 sfixed32_field = 11;
   */
  sfixed32Field = 0;

  /**
   * Sfixed64
   *
   * @generated from field: sfixed64 sfixed64_field = 12;
   */
  sfixed64Field = protoInt64.zero;

  /**
   * Bool
   *
   * @generated from field: bool bool_field = 13;
   */
  boolField = false;

  /**
   * String
   *
   * @generated from field: string string_field = 14;
   */
  stringField = "";

  /**
   * Bytes
   *
   * @generated from field: bytes bytes_field = 15;
   */
  bytesField = new Uint8Array(0);

  /**
   * Any
   * see: https://protobuf.dev/programming-guides/proto3/#any
   *
   * @generated from field: google.protobuf.Any any_field = 16;
   */
  anyField?: Any;

  /**
   * Api
   *
   * @generated from field: google.protobuf.Api api_field = 17;
   */
  apiField?: Api;

  /**
   * Duration
   *
   * @generated from field: google.protobuf.Duration duration_field = 18;
   */
  durationField?: Duration;

  /**
   * Empty
   * 戻り値のない service などに使われる
   *
   * @generated from field: google.protobuf.Empty empty_field = 19;
   */
  emptyField?: Empty;

  /**
   * FieldMask
   * Request にこいつを含めて、クライアントが「この値だけくれ」と指定できるようにする
   *
   * @generated from field: google.protobuf.FieldMask field_mask_field = 20;
   */
  fieldMaskField?: FieldMask;

  /**
   * SourceContext
   *
   * @generated from field: google.protobuf.SourceContext source_context_field = 21;
   */
  sourceContextField?: SourceContext;

  /**
   * Struct
   *
   * @generated from field: google.protobuf.Struct struct_field = 22;
   */
  structField?: Struct;

  /**
   * Timestamp
   *
   * @generated from field: google.protobuf.Timestamp timestamp_field = 23;
   */
  timestampField?: Timestamp;

  /**
   * Type
   *
   * @generated from field: google.protobuf.Type type_field = 24;
   */
  typeField?: Type;

  constructor(data?: PartialMessage<EveryScalars>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "schemas.v1.EveryScalars";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "double_field", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "float_field", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "int32_field", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "int64_field", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "uint32_field", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "uint64_field", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "sint32_field", kind: "scalar", T: 17 /* ScalarType.SINT32 */ },
    { no: 8, name: "sint64_field", kind: "scalar", T: 18 /* ScalarType.SINT64 */ },
    { no: 9, name: "fixed32_field", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 10, name: "fixed64_field", kind: "scalar", T: 6 /* ScalarType.FIXED64 */ },
    { no: 11, name: "sfixed32_field", kind: "scalar", T: 15 /* ScalarType.SFIXED32 */ },
    { no: 12, name: "sfixed64_field", kind: "scalar", T: 16 /* ScalarType.SFIXED64 */ },
    { no: 13, name: "bool_field", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "string_field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "bytes_field", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 16, name: "any_field", kind: "message", T: Any },
    { no: 17, name: "api_field", kind: "message", T: Api },
    { no: 18, name: "duration_field", kind: "message", T: Duration },
    { no: 19, name: "empty_field", kind: "message", T: Empty },
    { no: 20, name: "field_mask_field", kind: "message", T: FieldMask },
    { no: 21, name: "source_context_field", kind: "message", T: SourceContext },
    { no: 22, name: "struct_field", kind: "message", T: Struct },
    { no: 23, name: "timestamp_field", kind: "message", T: Timestamp },
    { no: 24, name: "type_field", kind: "message", T: Type },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EveryScalars {
    return new EveryScalars().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EveryScalars {
    return new EveryScalars().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EveryScalars {
    return new EveryScalars().fromJsonString(jsonString, options);
  }

  static equals(a: EveryScalars | PlainMessage<EveryScalars> | undefined, b: EveryScalars | PlainMessage<EveryScalars> | undefined): boolean {
    return proto3.util.equals(EveryScalars, a, b);
  }
}

/**
 * あれこれ使えるラベルをセットする。型がどうなるか。
 *
 * @generated from message schemas.v1.Labels
 */
export class Labels extends Message<Labels> {
  /**
   * repeated Array として扱われる
   *
   * @generated from field: repeated bool repeated_bool_field = 1;
   */
  repeatedBoolField: boolean[] = [];

  /**
   * どっちか、またはなんもなし。
   * see: https://protobuf.dev/programming-guides/proto3/#any
   *
   * @generated from oneof schemas.v1.Labels.oneof_field
   */
  oneofField: {
    /**
     * @generated from field: string string_in_oneof_field = 2;
     */
    value: string;
    case: "stringInOneofField";
  } | {
    /**
     * @generated from field: int32 int32_in_oneof_field = 3;
     */
    value: number;
    case: "int32InOneofField";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * Record として扱われる
   * see: https://protobuf.dev/programming-guides/proto3/#maps
   *
   * @generated from field: map<string, int32> map_field = 4;
   */
  mapField: { [key: string]: number } = {};

  /**
   * Optional として扱われる
   *
   * @generated from field: optional string optional_field = 5;
   */
  optionalField?: string;

  constructor(data?: PartialMessage<Labels>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "schemas.v1.Labels";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repeated_bool_field", kind: "scalar", T: 8 /* ScalarType.BOOL */, repeated: true },
    { no: 2, name: "string_in_oneof_field", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "oneof_field" },
    { no: 3, name: "int32_in_oneof_field", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "oneof_field" },
    { no: 4, name: "map_field", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 5 /* ScalarType.INT32 */} },
    { no: 5, name: "optional_field", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Labels {
    return new Labels().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Labels {
    return new Labels().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Labels {
    return new Labels().fromJsonString(jsonString, options);
  }

  static equals(a: Labels | PlainMessage<Labels> | undefined, b: Labels | PlainMessage<Labels> | undefined): boolean {
    return proto3.util.equals(Labels, a, b);
  }
}

