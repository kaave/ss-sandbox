// @generated by protoc-gen-connect-es v0.8.4 with parameter "target=ts,import_extension=none"
// @generated from file schemas/v1/example.proto (package schemas.v1, syntax proto3)
/* eslint-disable */

import { GetMessageResponse, SendMessageRequest } from "./example_pb";
import { Empty, MethodKind } from "@bufbuild/protobuf";

/**
 * HelloWorld サービス。
 *
 * @generated from service schemas.v1.HelloWorldService
 */
export const HelloWorldService = {
  typeName: "schemas.v1.HelloWorldService",
  methods: {
    /**
     * メッセージを受け取る。
     *
     * @generated from rpc schemas.v1.HelloWorldService.SendMessage
     */
    sendMessage: {
      name: "SendMessage",
      I: SendMessageRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * メッセージを受け取る。
     *
     * @generated from rpc schemas.v1.HelloWorldService.GetMessage
     */
    getMessage: {
      name: "GetMessage",
      I: Empty,
      O: GetMessageResponse,
      kind: MethodKind.Unary,
    },
    /**
     * メッセージを定期的に受け取る。
     *
     * @generated from rpc schemas.v1.HelloWorldService.StreamGetMessage
     */
    streamGetMessage: {
      name: "StreamGetMessage",
      I: Empty,
      O: GetMessageResponse,
      kind: MethodKind.ServerStreaming,
    },
  }
} as const;

// const test = {
//   typeName: "schemas.v1.HelloWorldService",
//   methods: {
//     /**
//      * メッセージを受け取る。
//      *
//      * @generated from rpc schemas.v1.HelloWorldService.SendMessage
//      */
//     sendMessage: {
//       name: "SendMessage",
//       I: SendMessageRequest,
//       O: Empty,
//       kind: MethodKind.Unary,
//     },
//     /**
//      * メッセージを受け取る。
//      *
//      * @generated from rpc schemas.v1.HelloWorldService.GetMessage
//      */
//     getMessage: {
//       name: "GetMessage",
//       I: Empty,
//       O: GetMessageResponse,
//       kind: MethodKind.Unary,
//     },
//     /**
//      * メッセージを定期的に受け取る。
//      *
//      * @generated from rpc schemas.v1.HelloWorldService.StreamGetMessage
//      */
//     streamGetMessage: {
//       name: "StreamGetMessage",
//       I: Empty,
//       O: GetMessageResponse,
//       kind: MethodKind.ServerStreaming,
//     },
//   }
// } satisfies {
//   typeName: string;
//   methods: Record<string, {
//     name: string;
//     I: unknown; // AnyMessage
//     O: unknown; // AnyMessage
//     kind: MethodKind;
//   }>,
// }

// const a: AnyMessage = new Empty();
// const b: AnyMessage | Empty = new GetMessageResponse()

// type A = keyof typeof test['methods'];
