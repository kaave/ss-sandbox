// @generated by protoc-gen-es v1.1.1 with parameter "target=ts,import_extension=none"
// @generated from file schemas/v1/example.proto (package schemas.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * お試しで作成した Enum。
 * 適当。
 *
 * @generated from enum schemas.v1.HelloType
 */
export enum HelloType {
  /**
   * 謎
   *
   * @generated from enum value: HELLO_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Foo
   *
   * @generated from enum value: HELLO_TYPE_FOO = 1;
   */
  FOO = 1,

  /**
   * Bar
   *
   * @generated from enum value: HELLO_TYPE_BAR = 2;
   */
  BAR = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(HelloType)
proto3.util.setEnumType(HelloType, "schemas.v1.HelloType", [
  { no: 0, name: "HELLO_TYPE_UNSPECIFIED" },
  { no: 1, name: "HELLO_TYPE_FOO" },
  { no: 2, name: "HELLO_TYPE_BAR" },
]);

/**
 * 送信の Example。
 *
 * @generated from message schemas.v1.SendMessageRequest
 */
export class SendMessageRequest extends Message<SendMessageRequest> {
  /**
   * センテンス。最大 256 文字。
   *
   * @generated from field: string sentence = 1;
   */
  sentence = "";

  /**
   * EMail。
   *
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * サンプルの Enum。
   *
   * @generated from field: schemas.v1.HelloType type = 3;
   */
  type = HelloType.UNSPECIFIED;

  constructor(data?: PartialMessage<SendMessageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "schemas.v1.SendMessageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sentence", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "enum", T: proto3.getEnumType(HelloType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendMessageRequest {
    return new SendMessageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendMessageRequest {
    return new SendMessageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendMessageRequest {
    return new SendMessageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendMessageRequest | PlainMessage<SendMessageRequest> | undefined, b: SendMessageRequest | PlainMessage<SendMessageRequest> | undefined): boolean {
    return proto3.util.equals(SendMessageRequest, a, b);
  }
}

/**
 * 受信の Example。
 *
 * @generated from message schemas.v1.GetMessageResponse
 */
export class GetMessageResponse extends Message<GetMessageResponse> {
  /**
   * センテンス。最大 256 文字。
   *
   * @generated from field: string sentence = 1;
   */
  sentence = "";

  /**
   * EMail。
   *
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * サンプルの Enum。
   *
   * @generated from field: schemas.v1.HelloType type = 3;
   */
  type = HelloType.UNSPECIFIED;

  /**
   * お試しで受け取るタイムスタンプ。
   *
   * @generated from field: google.protobuf.Timestamp got_at = 4;
   */
  gotAt?: Timestamp;

  constructor(data?: PartialMessage<GetMessageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "schemas.v1.GetMessageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sentence", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "enum", T: proto3.getEnumType(HelloType) },
    { no: 4, name: "got_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMessageResponse {
    return new GetMessageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMessageResponse {
    return new GetMessageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMessageResponse {
    return new GetMessageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetMessageResponse | PlainMessage<GetMessageResponse> | undefined, b: GetMessageResponse | PlainMessage<GetMessageResponse> | undefined): boolean {
    return proto3.util.equals(GetMessageResponse, a, b);
  }
}

